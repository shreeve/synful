#!/usr/bin/env ruby

# ============================================================================
# synful - Ruby utility that shows syntax highlighted code in your browser
#
# Author: Steve Shreeve (steve.shreeve@gmail.com)
#   Date: Feb 18, 2023
#
# Thanks to Julie Evans for creating the amazing rouge library!
# ============================================================================
# GOALS:
# 1. Provide an easy way to view and print syntax highlighted source code
# 2. Enable file selection or rejection in an intuitive way
# ============================================================================
# TODO:
# 1. Ensure there is a section for a file, even when it has a bad encoding
# 2. See https://stackoverflow.com/questions/18519641/why-cant-i-refer-to-data-in-class-context
# ============================================================================

require "optparse"

OptionParser.new.instance_eval do
  @banner  = "usage: #{program_name} [options] <paths ...> [--] <-paths_to_skip ...>"

  on '-b'         , '--bypass'    , 'Bypass (skip over) top comments (begin with "#") in files'
  on '-f'         , '--foreground', 'Stay in the foreground, allows more requests'
  on '-h'         , '--help'      , 'Show help and command usage' do Kernel.abort to_s; end
  on '-i <exts>'  , '--include'   , 'Comma list of extensions to include (incompatible with -x)', Array
  on '-x <exts>'  , '--exclude'   , 'Comma list of extensions to exclude (incompatible with -i)', Array

  self
end.parse!(into: opts={}) rescue abort($!.message)

skip, want = ARGV.map(&:dup).partition {|item| item.delete_prefix!("-") }; ARGV.clear
want << "." if want.empty?
skip = skip.empty? ? nil : Set.new(skip)

nuke = opts[:bypass    ]
fore = opts[:foreground]
keep = opts[:include   ] # will become a Set or nil
deny = opts[:exclude   ] # will become a Set or nil

if keep && deny
  abort "#{File.basename $0}: include and exclude cannot be used together"
elsif keep
  keep = Set.new(keep.map(&:downcase))
  deny = nil
else
  keep = nil
  deny = Set.new(((deny || []) + %w[
    ico jpg jpeg otf png pdf gif css svg eot ttf woff woff2 o a dylib
    gem gz zip sqlite3 DS_Store
  ]).map(&:downcase))
end

$skip, $want, $fore, $keep, $deny, $nuke = [skip, want, fore, keep, deny, nuke]

# ============================================================================

require "rouge"

$show = Rouge::Formatters::HTMLLegacy.new(line_numbers: true)

Rouge::Lexers::Ruby.filenames "*.rbx", "*.ru", "*.imba"
Rouge::Lexers::Sass.filenames "*.styl"
Rouge::Lexers::ERB.filenames "*.eco"

# ============================================================================

require "find"
require "set"
require "sinatra"

$stderr = $stderr.dup.reopen File.new("/dev/null", "w") # turn off logger

set :server, "webrick"

get "*" do
  skip, want, fore, keep, deny = [$skip, $want, $fore, $keep, $deny]

  init = Time.now.to_f

  @list = want.inject([]) do |list, path|
    if !File.readable?(path)
      warn "unreadable '#{path}'"
    elsif File.directory?(path)
      Find.find(path) do |path|
        path.delete_prefix!("./") #!# TODO: is this working as expected?
        if !File.readable?(path) || path == "."
          next
        elsif File.directory?(path)
          Find.prune if File.basename(path).start_with?(".") or skip&.include?(path)
        elsif File.file?(path)
          next if skip&.include?(path)
          type = path[/(?<=\.)[^.\/]+\z/].to_s.downcase
          list << path if keep ? keep.include?(type) : !deny.include?(type)
        else
          warn "unknown '#{path}'"
        end
      end
    elsif File.file?(path)
      list << path # requested explicitly
    end
    list
  end.sort.uniq

  # show filenames
  time = Time.now.strftime("%Y-%m-%d %H:%M:%S")
  STDERR.puts "\n[#{time}]\n\n", @list.map {|item| "  â€¢ #{item}"}

  # generate content and generation time
  $err = false
  body = erb :page
  wait = Time.now.to_f - init
  STDERR.puts "\nTime elapsed: %.2f" % wait

  # send response
  $fore or Thread.new { sleep wait; exit! } # how can we know when the request is "done?"
  headers "Connection" => "close"
  body
end

Thread.new do
  sleep 0.1 until settings.running?
  fork or exec "open 'http://localhost:#{settings.port}/'"
end

__END__

@@ layout
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Synful</title>
  <link rel="icon" href="data:,">
  <style type="text/css">
    html body { font-size: 14px; }
    body { font-family: Verdana; padding: 5px; }
    a { text-decoration: none; }
    h4 a { color: #fff; font-weight: bold; margin: 0; border: none; }
    h4 a:hover { background: #333; }
    h4 { background: black; color: white; padding: 5px; margin: 0; border: none; }
    li a { color: #000; }
    li a:hover { text-decoration: underline; color: #666; }
    pre { margin: 0; font-family: Consolas, Menlo, monospace; }

    .rouge-table                { padding: 0; border-collapse: collapse; }
    .rouge-table td             { padding: 0; vertical-align: top; }
    .rouge-table td:first-child { text-align: right; }
    .rouge-table pre            { padding: 0.7em; }

    .codehilite         { margin: 0; background: #fff; white-space: pre; overflow-x: hidden; }
    .codehilite .lineno { margin: 0; color: #ddd; background: #f4f4f4; }
    .codehilite .hll    { background-color: #ffffcc }
    .codehilite .c      { color: #888888 }                     /* Comment                     */
    .codehilite .k      { color: #008800; font-weight: bold }  /* Keyword                     */
    .codehilite .o      { color: #333333 }                     /* Operator                    */
    .codehilite .cm     { color: #888888 }                     /* Comment.Multiline           */
    .codehilite .cp     { color: #557799 }                     /* Comment.Preproc             */
    .codehilite .c1     { color: #888888 }                     /* Comment.Single              */
    .codehilite .cs     { color: #cc0000; font-weight: bold }  /* Comment.Special             */
    .codehilite .gd     { color: #a00000 }                     /* Generic.Deleted             */
    .codehilite .ge     { font-style: italic }                 /* Generic.Emph                */
    .codehilite .gr     { color: #ff0000 }                     /* Generic.Error               */
    .codehilite .gh     { color: #000080; font-weight: bold }  /* Generic.Heading             */
    .codehilite .gi     { color: #00a000 }                     /* Generic.Inserted            */
    .codehilite .go     { color: #888888 }                     /* Generic.Output              */
    .codehilite .gp     { color: #c65d09; font-weight: bold }  /* Generic.Prompt              */
    .codehilite .gs     { font-weight: bold }                  /* Generic.Strong              */
    .codehilite .gu     { color: #800080; font-weight: bold }  /* Generic.Subheading          */
    .codehilite .gt     { color: #0044dd }                     /* Generic.Traceback           */
    .codehilite .kc     { color: #008800; font-weight: bold }  /* Keyword.Constant            */
    .codehilite .kd     { color: #008800; font-weight: bold }  /* Keyword.Declaration         */
    .codehilite .kn     { color: #008800; font-weight: bold }  /* Keyword.Namespace           */
    .codehilite .kp     { color: #003388; font-weight: bold }  /* Keyword.Pseudo              */
    .codehilite .kr     { color: #008800; font-weight: bold }  /* Keyword.Reserved            */
    .codehilite .kt     { color: #333399; font-weight: bold }  /* Keyword.Type                */
    .codehilite .m      { color: #6600ee; font-weight: bold }  /* Literal.Number              */
    .codehilite .n      { color: #933 }                        /* name?                       */
    .codehilite .s      { }                                    /* Literal.String              */
    .codehilite .na     { color: #0000cc }                     /* Name.Attribute              */
    .codehilite .nb     { color: #007020 }                     /* Name.Builtin                */
    .codehilite .nc     { color: #bb0066; font-weight: bold }  /* Name.Class                  */
    .codehilite .no     { color: #003366; font-weight: bold }  /* Name.Constant               */
    .codehilite .nd     { color: #555555; font-weight: bold }  /* Name.Decorator              */
    .codehilite .ni     { color: #880000; font-weight: bold }  /* Name.Entity                 */
    .codehilite .ne     { color: #ff0000; font-weight: bold }  /* Name.Exception              */
    .codehilite .nf     { color: #0066bb; font-weight: bold }  /* Name.Function               */
    .codehilite .nl     { color: #997700; font-weight: bold }  /* Name.Label                  */
    .codehilite .nn     { color: #0e84b5; font-weight: bold }  /* Name.Namespace              */
    .codehilite .nt     { color: #007700 }                     /* Name.Tag                    */
    .codehilite .nv     { color: #996633 }                     /* Name.Variable               */
    .codehilite .ow     { color: #000000; font-weight: bold }  /* Operator.Word               */
    .codehilite .w      { color: #bbbbbb }                     /* Text.Whitespace             */
    .codehilite .mf     { color: #6600ee; font-weight: bold }  /* Literal.Number.Float        */
    .codehilite .mh     { color: #005588; font-weight: bold }  /* Literal.Number.Hex          */
    .codehilite .mi     { color: #0000dd; font-weight: bold }  /* Literal.Number.Integer      */
    .codehilite .mo     { color: #4400ee; font-weight: bold }  /* Literal.Number.Oct          */
    .codehilite .sb     { }                                    /* Literal.String.Backtick     */
    .codehilite .sc     { color: #0044dd }                     /* Literal.String.Char         */
    .codehilite .sd     { color: #dd4422 }                     /* Literal.String.Doc          */
    .codehilite .s2     { }                                    /* Literal.String.Double       */
    .codehilite .se     { color: #666666; font-weight: bold; } /* Literal.String.Escape       */
    .codehilite .sh     { }                                    /* Literal.String.Heredoc      */
    .codehilite .si     { }                                    /* Literal.String.Interpol     */
    .codehilite .sx     { color: #dd2200; }                    /* Literal.String.Other        */
    .codehilite .sr     { color: #000000; }                    /* Literal.String.Regex        */
    .codehilite .s1     { }                                    /* Literal.String.Single       */
    .codehilite .ss     { color: #aa6600 }                     /* Literal.String.Symbol       */
    .codehilite .bp     { color: #007020 }                     /* Name.Builtin.Pseudo         */
    .codehilite .vc     { color: #336699 }                     /* Name.Variable.Class         */
    .codehilite .vg     { color: #dd7700; font-weight: bold }  /* Name.Variable.Global        */
    .codehilite .vi     { color: #3333bb }                     /* Name.Variable.Instance      */
    .codehilite .il     { color: #0000dd; font-weight: bold }  /* Literal.Number.Integer.Long */
  </style>
</head>
<body>
<div class="top">

<%= yield %></div>
</body>
</html>

@@ page
<%= erb :toc if (count = @list.size) > 1 %><%
  @list.each_with_index do |file, i|
    @file = file
    @prev = @list[(i - 1) % count]
    @next = @list[(i + 1) % count]
    @curr = count > 1 ? "#{i + 1}) " : "" %>
<%= erb :file %><% end %>

@@ toc
<h4><a name="top">Index</a></h4>

<ul><% @list.each do |file| %>
  <li><a href="#<%= file %>"><%= file %></a></li><% end %>
</ul>

@@ file
<%
  begin
    data = File.read(@file)
    data.gsub!(/\t/, "  ") # replace tab with 2 spaces (make configurable?)
    data.sub!(/\A.*?(?=^[^#\s])/m, "") if $nuke # nuke top comments (license, etc.)
    type = Rouge::Lexer.guess(filename:@file, source:data)
  rescue ArgumentError => e
    STDERR.puts "\n" unless $err; $err = true
    STDERR.puts "Invalid byte encoding in '#{@file}'"
    return "Invalid... something here?"
  rescue => e
    if (data =~ /\A[^\n]+ruby/)
      type = Rouge::Lexer.guess(filename:"foo.rb")
    else
      return "<p>Unable to process <b>#{@file.inspect}</b> (#{$!})\n\n"
    end
  end
  if type.tag == "plaintext" || (type.tag == "html" && @file !~ /\.html?$/i)
    mime = `file -b --mime-type "#{@file}"`.chomp
    type = (mime =~ %r!\b(?:octet|image|font)\b!) ? nil : Rouge::Lexer.guess(mimetype:mime)
  end
%>

<h4>
  <a name="<%= @file %>"><%= @curr %><%= @file %>
    (<%= data.count("\n") + 1 %> lines)
    <%= "[" + type.tag + "]" if type %>
    <%= File.mtime(@file).strftime("on %Y-%m-%d at %-I:%M %P") %>
  </a>
  <span style="float: right">
  <a class="jump" href="#<%= @prev %>">&nbsp;&nbsp;&nbsp;&nbsp;&darr;&nbsp;&nbsp;&nbsp;&nbsp;</a>
  <a class="jump" href="#<%= @next %>">&nbsp;&nbsp;&nbsp;&nbsp;&UpArrow;&nbsp;&nbsp;&nbsp;&nbsp;</a>
  <a class="jump" href="#top">&nbsp;&nbsp;&nbsp;&nbsp;â¥£&nbsp;&nbsp;&nbsp;&nbsp;</a>
  </span>
</h4>

<%=
  if type
    begin
      html = $show.format(type.lex(data))
      html[html.rindex("\n"), 1] = ""
      html
    rescue
      type = Rouge::Lexer.guess(filename:"foo.txt")
      "<p>Unable to parse, showing plaintext instead...</p>" +
      $show.format(type.lex(data))
    end
  else
    "<p>(binary file)</p>"
  end
%>
